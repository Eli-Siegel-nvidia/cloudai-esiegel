from unittest.mock import mock_open, patch

import pytest
from cloudai.schema.system import SlurmSystem
from cloudai.schema.system.slurm import SlurmNode, SlurmNodeState
from cloudai.schema.system.slurm.strategy import SlurmCommandGenStrategy


@pytest.fixture
def strategy_fixture():
    slurm_system = SlurmSystem(
        name="TestSystem",
        install_path="/path/to/install",
        output_path="/path/to/output",
        default_partition="main",
        partitions={"main": [SlurmNode(name="node1", partition="main", state=SlurmNodeState.IDLE)]},
    )
    env_vars = {"TEST_VAR": "VALUE"}
    cmd_args = {"test_arg": "test_value"}
    strategy = SlurmCommandGenStrategy(slurm_system, env_vars, cmd_args)
    return strategy


@pytest.mark.usefixtures("strategy_fixture")
def test_filename_generation(strategy_fixture):
    with patch("builtins.open", new_callable=mock_open(), create=True) as mock_file, patch("os.path.join") as mock_join:
        mock_join.return_value = "dummy_path/cloudai_autogenerated_sbatch_script.sh"

        args = {"job_name": "test_job", "num_nodes": 2, "partition": "test_partition", "node_list_str": "node1,node2"}
        env_vars_str = "export TEST_VAR=VALUE"
        srun_command = "srun --test test_arg"
        output_path = "dummy_path"

        sbatch_command = strategy_fixture._write_sbatch_script(args, env_vars_str, srun_command, output_path)

        filepath_from_command = sbatch_command.split()[-1]

        mock_file.assert_called_with(filepath_from_command, "w")

        assert sbatch_command == f"sbatch {filepath_from_command}"

        mock_join.assert_called_with(output_path, "cloudai_autogenerated_sbatch_script.sh")

        assert filepath_from_command == "dummy_path/cloudai_autogenerated_sbatch_script.sh"
